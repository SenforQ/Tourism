name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/tourism.ipa"
          APPLE_ID: "guozhijun@cumulustech.shop"
          APP_SPECIFIC_PASSWORD: "kniy-hkyv-dxma-bbcp"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
